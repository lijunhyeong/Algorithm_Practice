/*
1. 아이디어:
dp[i] = kotlin.math.max(dp[i - 1] + dt[i], dt[i])
기존 dt[i]와 dp[i - 1] + dt[i]를 비교해서 더 큰 것을 dp[i]에 넣는다.
2. 시간복잡도 O(N)
3. 자료구조 dp
 */
fun main() {
    val br = BufferedReader(InputStreamReader(System.`in`))
    val bw = BufferedWriter(OutputStreamWriter(System.out))

    val n = br.readLine().toInt()
    val dt = br.readLine().split(' ').map { it.toInt() }

    val dp = Array(n){0}
    dp[0] = dt[0]
    var max = dp[0]
    for (i in 1 until n){
        dp[i] = kotlin.math.max(dp[i - 1] + dt[i], dt[i])
        if (max < dp[i]){
            max = dp[i]
        }
    }

    bw.write("$max")


    bw.flush()
    bw.close()

}
