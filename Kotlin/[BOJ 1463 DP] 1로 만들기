/*
1463 1로 만들기
1. 아이디어:
이전에 구한 값의 연산 횟수를 재사용한다.
2. 시간복잡도 O(N)
3. 자료구조  Array, toBigDecimal()
 */
import java.io.BufferedReader
import java.io.BufferedWriter
import java.io.InputStreamReader
import java.io.OutputStreamWriter
import kotlin.math.max
import kotlin.math.min

fun main() {
    val br = BufferedReader(InputStreamReader(System.`in`))
    val bw = BufferedWriter(OutputStreamWriter(System.out))

    val num = br.readLine().toInt()

    val dp = Array(num+1){0}

    dp[0] = 0
    dp[1] = 0
    for (i in 2..num){
        dp[i] = dp[i-1] +1      // case1 -1: 전 값에 -1하면 그값이 되기 때문에 횟수 하나를 증가시킨다.

        // case2 나누기3: dp[i/3]+1에서 +1을 하는 이유는 나누기3을 해준 횟수다.
        if (i%3 == 0) dp[i] = min(dp[i], dp[i/3] +1 )
        if (i%2 == 0) dp[i] = min(dp[i], dp[i/2] +1 )

    }

    bw.write("${dp[num]}")

    bw.flush()
    bw.close()

}
