import java.io.BufferedReader
import java.io.BufferedWriter
import java.io.InputStreamReader
import java.io.OutputStreamWriter
import java.util.*

fun main() {
    val br = BufferedReader(InputStreamReader(System.`in`))
    val bw = BufferedWriter(OutputStreamWriter(System.out))

    // 수빈, 수빈이 동생
    val (n, k) = br.readLine().split(" ").map { it.toInt() }

    val visited = BooleanArray(100001)

    var fastTime = Int.MAX_VALUE

    fun bfs(x: Int) {
        val q = ArrayDeque<Pair<Int,Int>>()
        q.add(Pair(0, x))
        visited[x] = true

        while (q.isNotEmpty()) {
            val value = q.first().first
            val number = q.first().second
            q.removeFirst()
            visited[number] = true

            if (k == number) {
                if (value < fastTime) {
                    fastTime = value
                }
            }

            for (i in arrayOf(1, -1, 2)) {
                val num = if (i == 2) { i * number } else { number + i }
                if (num in 0..100000 && !visited[num]) {
                    if (i == 2) {
                        q.add(Pair(value, num))
                    } else {
                        q.add(Pair(value+1, num))
                    }
                }
            }
        }
    }

    bfs(n)
    bw.write("$fastTime")

    bw.flush()
    bw.close()
}
