import java.io.BufferedReader
import java.io.BufferedWriter
import java.io.InputStreamReader
import java.io.OutputStreamWriter
import kotlin.math.min

/*
- 아이디어:
* 시계수에 0은 포함되지 않는다.
1. 주어진 값에서 가장 작은 시계수를 구한다.
2. set에 각 수에서 가장 작은 시계수를 구해서 넣는다.
3. 오름차순 정렬하고 입렵 받은 시계수가 몇번째인지 출력한다.(인덱스는 0번쨰 부터이기 때문에 +1을 함)
 */

fun main() {
    val br = BufferedReader(InputStreamReader(System.`in`))
    val bw = BufferedWriter(OutputStreamWriter(System.out))

    val arr = br.readLine().split(" ").joinToString("")
    val inputMin = searchMinNumber(arr)

    // 모든 시계수 구하기
    val arrSet = mutableSetOf<Int>()
    for (i in 1111..9999){
        val number = i.toString()
        if (number[0] != '0' && number[1] != '0' && number[2] != '0' && number[3] != '0')
            arrSet.add(searchMinNumber(number))
    }


    bw.write("${arrSet.sorted().indexOf(inputMin)+1}")


    bw.flush()
    bw.close()
    br.close()
}

private fun searchMinNumber(arr: String): Int {
    val one = min("${arr[0]}${arr[1]}${arr[2]}${arr[3]}".toInt(), "${arr[1]}${arr[2]}${arr[3]}${arr[0]}".toInt())
    val two = min("${arr[2]}${arr[3]}${arr[0]}${arr[1]}".toInt(), "${arr[3]}${arr[0]}${arr[1]}${arr[2]}".toInt())
    return min(one, two)
}
