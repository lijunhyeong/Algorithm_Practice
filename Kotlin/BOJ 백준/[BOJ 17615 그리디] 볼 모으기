import java.io.BufferedReader
import java.io.BufferedWriter
import java.io.InputStreamReader
import java.io.OutputStreamWriter
/*
- 아이디어:
1. 'B' 와 'R'의 양쪽 끝에서부터 이어지는 볼의 최대 값을 구한다.
2. 'R'과 'B'의 각 총 개수를 구한다.
3. 'B' 와 'R'의 (총 개수 - 끝에 이어지는 최대값)이 더 작은 것을 출력한다.
 */
private lateinit var map:String
fun main() {
    val br = BufferedReader(InputStreamReader(System.`in`))
    val bw = BufferedWriter(OutputStreamWriter(System.out))

    val n = br.readLine().toInt()
    map = br.readLine()

    val blue = kotlin.math.max(leftSearch(n, 'B'), rightSearch(n, 'B'))
    val red = kotlin.math.max(leftSearch(n, 'R'), rightSearch(n, 'R'))

    var redTotal = 0
    var blueTotal = 0
    for (i in map){
        if (i == 'R') redTotal+=1
        else blueTotal +=1
    }

    bw.write("${kotlin.math.min(redTotal-red, blueTotal-blue)}")

    bw.flush()
    bw.close()
    br.close()
}

private fun leftSearch(n:Int, target:Char): Int{
    var leftCount = 0

    for (i in 0 until n){
        if (target != map[i]) break
        else leftCount+=1
    }

    return leftCount
}

private fun rightSearch(n:Int, target: Char):Int{
    var rightCount = 0

    for (i in n-1 downTo 0){
        if (target != map[i]) break
        else rightCount+=1
    }

    return rightCount
}
