import java.io.BufferedReader
import java.io.BufferedWriter
import java.io.InputStreamReader
import java.io.OutputStreamWriter
import kotlin.math.pow
/*
한 번 divider 함수를 호추할 때마다 재귀가 4번(1사분면,2사분면,3사분면,4사분면) 호출 된다.
이는 대략 5억으로, 시간초과가 발생할 수밖에 없으며, 
배열에 모든 cnt값을 저장하면 배열의 최대 크기 30000*30000을 넘으며 메모리 초과가 발생한다.
divider 함수를 재귀로 호출할 때 내가 찾는 범위가 맞느지 판별하여 함수를 호출하지 않으면
시간초과를 피할 수 있다.
/*

fun main() {
    val br = BufferedReader(InputStreamReader(System.`in`))
    val bw = BufferedWriter(OutputStreamWriter(System.out))

    val (N, r, c) = br.readLine().split(" ").map { it.toInt() }
    var cnt = 0

    // 크기
    val size = (2.0.pow(N)).toInt()

    fun divider(y: Int, x: Int, dist: Int) {
        // 길이가 2가 되었을 때 2사분면, 1사분면, 3사분면, 4사분면 순서대로 값 생성
        if (dist == 2 || dist == 1) {
            for (j in y until y + dist) {
                for (i in x until x + dist) {
                    //answer[j][i] = cnt
                    if (j == r && i == c) {
                        bw.write("$cnt")
                        return
                    }
                    cnt += 1
                }
            }
        } else {
            // 2사분면
            if (r in y until y + dist / 2 && c in x until x + dist / 2) {
                divider(y, x, dist / 2)
            } else {
                cnt += (dist / 2) * (dist / 2)
            }
            // 1사분면
            if (r in y until y + dist / 2 && c in x until x + dist) {
                divider(y, x + dist / 2, dist / 2)
            } else {
                cnt += (dist / 2) * (dist / 2)
            }
            // 3사분면
            if (r in y until y + dist && c in x until x + dist / 2) {
                divider(y + dist / 2, x, dist / 2)
            } else {
                cnt += (dist / 2) * (dist / 2)
            }
            // 4사분면
            if (r in y until y + dist && c in x until x + dist) {
                divider(y + dist / 2, x + dist / 2, dist / 2)
            } else {
                cnt += (dist / 2) * (dist / 2)
            }
        }
    }

    divider(0, 0, size)

    bw.flush()
    bw.close()
}
