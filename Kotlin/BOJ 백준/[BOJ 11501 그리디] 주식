import java.io.BufferedReader
import java.io.BufferedWriter
import java.io.InputStreamReader
import java.io.OutputStreamWriter

/*
- 아이디어:
1. 날 별 주가가 10,000이하이고 개수가 1,000,000이기 때문에 answer를 Long으로 선언한다.
2. O(n) 시간복잡도로 해결해야한다.
3. 주가가 낮을 때는 주식을 사야되고, 높을 때는 팔아야 된다.
4. 여기서 최고점은 자신의 오른 쪽에 있는 값들 중 가장 큰 값을 의미한다.
5. 따라서 오른쪽에서 왼쪽 방향으로 탐색하여 배열의 각 위치에서 최고점을 구한 후 계산한다.
6. max 변수에 마지막 주가를 넣은다.
7. 끝에서부터 탐색하며 max보다 큰 경우 max를 교체하고 작은 경우 (max-주가)를 answer에 더한다.
*/
fun main() {
    val br = BufferedReader(InputStreamReader(System.`in`))
    val bw = BufferedWriter(OutputStreamWriter(System.out))

    val n = br.readLine().toInt()

    repeat(n) {
        val num = br.readLine().toInt()
        val arr = br.readLine().split(" ").map { it.toInt() }.toIntArray()

        var answer = 0L
        var max = arr[num-1]

        for (i in num-1 downTo 0) {
            if (max > arr[i]) answer+= max-arr[i]
            else max = arr[i]
        }

        bw.write("$answer\n")

    }


    bw.flush()
    bw.close()
    br.close()
}
