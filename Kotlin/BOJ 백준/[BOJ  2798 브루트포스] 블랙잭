
import java.io.BufferedReader
import java.io.BufferedWriter
import java.io.InputStreamReader
import java.io.OutputStreamWriter

fun <T> combination(answer: MutableList<List<T>>, el: List<T>, ck: Array<Boolean>, start: Int, target: Int) {
    if(target == 0) {
        answer.addAll( listOf(el.filterIndexed { index, t -> ck[index] }) )
    } else {
        for(i in start until el.size) {
            ck[i] = true
            combination(answer, el, ck, i + 1, target - 1)
            ck[i] = false
        }
    }
}
fun main(){
    val br = BufferedReader(InputStreamReader(System.`in`))
    val bw = BufferedWriter(OutputStreamWriter(System.out))

    val n = br.readLine().split(' ').map { it.toInt() }
    val arr = br.readLine().split(' ').map { it.toInt() }

    val answer = mutableListOf<List<Int>>()
    combination(answer, arr, Array<Boolean>(arr.size) { false }, 0,  3)

    var max = 0
    for (i in answer){
        val count = i.sum()
        if (count <= n[1]){
            if (count >= max){
                max = count
            }
        }
    }

    bw.write(max.toString())

    // bw.write()
    bw.flush()
    bw.close()
}
