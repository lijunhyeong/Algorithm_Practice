import java.io.BufferedReader
import java.io.BufferedWriter
import java.io.InputStreamReader
import java.io.OutputStreamWriter
import java.util.*

/*
- 아이디어:
1. 다익스트라를 활용하여 푼다.
2. 출발지= map[0][0], 도착지= map[n-1][n-1]
3. 상,하,좌,우를 돌며 최소값을 찾는다. -> BFS 활용
*/
fun main() {
    val br = BufferedReader(InputStreamReader(System.`in`))
    val bw = BufferedWriter(OutputStreamWriter(System.out))

    // 상, 하, 좌, 우
    val dy = arrayOf(-1, 1, 0, 0)
    val dx = arrayOf(0, 0, -1, 1)
    var cnt = 0
    while (true) {
        val n = br.readLine().toInt()
        if (n == 0) break

        cnt+=1
        val map = Array(n + 1) { IntArray(n + 1) }
        val distanceValue = Array(n + 1) { IntArray(n + 1) { Int.MAX_VALUE } }

        for (j in 0 until n) {
            val s = br.readLine().split(" ").map { it.toInt() }
            for (i in 0 until n) {
                map[j][i] = s[i]
            }
        }

        // 우선 순위 큐(거리, 값)
        val q = PriorityQueue<Pair<Pair<Int, Int>, Int>> { p1, p2 ->
            when {
                p1.second > p2.second -> 1
                p1.second < p2.second -> -1
                else -> 0
            }
        }
        q.add(Pair(Pair(0, 0), map[0][0]))
        distanceValue[0][0] = map[0][0]

        while (q.isNotEmpty()) {
            val (position, value) = q.poll()
            val y = position.first
            val x = position.second

            if (distanceValue[y][x] < value) continue

            for (i in dx.indices) {
                val ny = y + dy[i]
                val nx = x + dx[i]
                if (ny in 0 until n && nx in 0 until n) {
                    val cost = map[ny][nx] + value
                    if (cost < distanceValue[ny][nx]) {
                        distanceValue[ny][nx] = cost
                        q.add(Pair(Pair(ny, nx), cost))
                    }
                }
            }
        }

        bw.write("Problem $cnt: ${distanceValue[n - 1][n - 1]}\n")

    }

    bw.flush()
    bw.close()
    br.close()
}
