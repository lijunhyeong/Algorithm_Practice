import java.io.BufferedReader
import java.io.BufferedWriter
import java.io.InputStreamReader
import java.io.OutputStreamWriter
/*
- 아이디어: 내가 생각한 구간 합 구하는 법
1. 누적합 최종 수인 map[y2][x2]를 answer에 대입한다.
2. answer에 map[y1][x1] 전의 수를 뺀다.
3. answer에 구간의 사이 값을 뺀다.
    ex) x1=2/y1=2/x2=4/y2=3인 경우 3번째 줄에 첫번째 수(map[3][1])를 뺀다.
 */
fun main() {
    val br = BufferedReader(InputStreamReader(System.`in`))
    val bw = BufferedWriter(OutputStreamWriter(System.out))

    val (N, case) = br.readLine().split(" ").map { it.toInt() }
    val map = Array(N + 1) { IntArray(N + 1) }

    for (y in 1..N) {
        val s = br.readLine().split(" ").map { it.toInt() }
        for (x in 1..N) {
            if (y == 1 && x == 1) {
                map[y][x] = s[0]
            } else if (y != 1 && x == 1) {
                map[y][x] = map[y - 1][N] + s[0]
            } else {
                map[y][x] = map[y][x - 1] + s[x - 1]
            }
        }
    }

    repeat(case) {
        val (y1, x1, y2, x2) = br.readLine().split(" ").map { it.toInt() }
        var answer = map[y2][x2]

        // map[y2][x2]와 map[y1][x1-1](전의 수) 빼기
        // x1이 첫번째 이면 위 줄의 끝에 수
        answer -= if (x1 == 1) map[y1 - 1][N] else map[y1][x1 - 1]


        // 사이값 빼기(x1>1 경우)
        for (y in y1 + 1..y2) {
            val front = if (x1 == 1) map[y - 1][N] else map[y][x1 - 1]
            answer -= (front - map[y - 1][x2])
        }

        bw.write("$answer\n")

    }

    bw.flush()
    bw.close()
    br.close()
}
