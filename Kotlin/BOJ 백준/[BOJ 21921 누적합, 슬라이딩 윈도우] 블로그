import java.io.BufferedReader
import java.io.BufferedWriter
import java.io.InputStreamReader
import java.io.OutputStreamWriter

/*
- 아이디어
1. dp를 통해 누적합을 만든다.
2. 최대 방문자 numberOfVisited.maxOrNull()이 0이라면 SAD를 출력한다.
3. 투포인터를 이용해서 X기간을 카운트하여 사용자가 제일 많은 기간을 찾아서 출력한다.
4. 둘째줄에는 사용자가 제일 많은 기간의 개수를 출력한다.
    - dp를 만들어서 누적합을 구한다.
    - map을 이용하여 X기간 동안 사용자 수를 넣고
    - 내림차순 정렬을 통해 제일 많은 사용자 수와, 기간 개수를 출력한다.
 */

private var answer = HashMap<Int, Int>()
fun main() {
    val br = BufferedReader(InputStreamReader(System.`in`))
    val bw = BufferedWriter(OutputStreamWriter(System.out))

    val (n, x) = br.readLine().split(" ").map { it.toInt() }
    val numberOfVisited = br.readLine().split(" ").map { it.toInt() }

    if (numberOfVisited.maxOrNull() == 0) {
        bw.write("SAD")
    } else {

        val dp = IntArray(n)
        dp[0] = numberOfVisited[0]
        for (i in 1 until n) {
            dp[i] = dp[i - 1] + numberOfVisited[i]
        }

        for (i in 0 until n) {
            val period = i - x
            if (period in 0 until n) {
                val visitedCount = dp[i] - dp[period]
                addHashMap(visitedCount)
            } else {
                // ** 그전까지의 누적합이 그 범위내의 제일 큰 수임.
                addHashMap(dp[i])
            }
        }
        val res = answer.toList().sortedByDescending { it.first }

        bw.write("${res[0].first}\n${res[0].second}")
    }

    bw.flush()
    bw.close()
    br.close()
}

private fun addHashMap(visitedCount: Int) {
    if (answer[visitedCount] == null) {
        answer[visitedCount] = 1
    } else {
        val num = answer[visitedCount]!!
        answer[visitedCount] = num + 1
    }
}
