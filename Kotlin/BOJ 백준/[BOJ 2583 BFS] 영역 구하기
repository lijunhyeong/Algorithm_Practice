import java.io.BufferedReader
import java.io.BufferedWriter
import java.io.InputStreamReader
import java.io.OutputStreamWriter
import java.util.PriorityQueue
/*
- 아이디어:
1. map 2차원 배열을 false로 초기화 한다.
2. 주어진 좌표에 맞는 직사각형 구간에 true를 넣는다.
3. bfs를 통해 false인 부분은 true로 바꾸고, 넓이를 탐색하며 넓이를 배열에 넣는다.
4. 영역의 개수와 각 영역의 넓이를 출력한다.
 */
fun main() {
    val br = BufferedReader(InputStreamReader(System.`in`))
    val bw = BufferedWriter(OutputStreamWriter(System.out))

    val (m, n, k) = br.readLine().split(" ").map { it.toInt() }
    val map = Array(m + 1) { BooleanArray(n + 1) }

    repeat(k) {
        val (x1, y1, x2, y2) = br.readLine().split(" ").map { it.toInt() }
        for (y in y1 until y2) {
            for (x in x1 until x2) {
                map[y][x] = true
            }
        }
    }

    /*for (y in 0 until  m){
        for (x in 0 until  n){
            bw.write("${map[y][x]} ")
        }
        bw.newLine()
    }*/

    // 상 하 좌 우
    val dy = arrayOf(1, -1, 0, 0)
    val dx = arrayOf(0, 0, -1, 1)
    fun bfs(y: Int, x: Int): Int {
        var cnt = 1
        val q = ArrayDeque<Pair<Int, Int>>()
        map[y][x] = true
        q.add(Pair(y, x))

        while (q.isNotEmpty()) {
            val (yy, xx) = q.removeFirst()
            for (i in dy.indices){
                val ny = yy+dy[i]
                val nx = xx+dx[i]
                if (ny in 0 until m && nx in 0 until n && !map[ny][nx]){
                    map[ny][nx] = true
                    cnt+=1
                    q.add(Pair(ny,nx))
                }
            }
        }
        return cnt
    }

    val answer = mutableListOf<Int>()
    for (y in 0 until m) {
        for (x in 0 until n) {
            if (!map[y][x]) {
                answer.add(bfs(y, x))
            }
        }
    }

    bw.write("${answer.size}\n")
    bw.write(answer.sorted().joinToString(" "))

    bw.flush()
    bw.close()
    br.close()
}
