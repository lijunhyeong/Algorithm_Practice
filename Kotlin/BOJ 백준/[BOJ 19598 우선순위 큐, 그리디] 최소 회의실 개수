import java.io.BufferedReader
import java.io.BufferedWriter
import java.io.InputStreamReader
import java.io.OutputStreamWriter
import java.util.PriorityQueue
/*
- 아이디어:
1. Pair(시작시간, 종료시간)으로 배열을 만든다.
2. 시작시간 기준으로 오름차순 정렬한다.
3. 우선순위 큐에 배열의 첫번째 끝나는 시간을 넣는다.
4. 배열에서 하나씩 빼면서 우선순위큐 앞에 있는 수와 비교하여
배열의 종료시간이 같거나 크면 우선순위큐 맨앞의 수를 뺀다.
5. 배열에서 뺀 종료시간을 우선순위 큐에 넣는다.
 */
fun main() {
    val br = BufferedReader(InputStreamReader(System.`in`))
    val bw = BufferedWriter(OutputStreamWriter(System.out))

    val map = ArrayDeque<Pair<Int,Int>>()
    repeat(br.readLine().toInt()){
        val (st, ed) = br.readLine().split(" ").map { it.toInt() }
        map.add(Pair(st, ed))
    }
    map.sortBy{ it.first }

    val priorityQueue = PriorityQueue<Int>()
    priorityQueue.add(map.removeFirst().second)

    while (map.isNotEmpty()){
        val (start, end) = map.removeFirst()
        if (start >= priorityQueue.peek()) priorityQueue.poll()

        priorityQueue.add(end)
    }

    bw.write("${priorityQueue.size}")

    bw.flush()
    bw.close()
    br.close()
}
