import java.io.BufferedReader
import java.io.BufferedWriter
import java.io.InputStreamReader
import java.io.OutputStreamWriter
import kotlin.math.pow

/*
- 아이디어:
1. 조건이 A=9999이고 P=5 이다. (9^5)*4 = 236196 이기 때문에 30만 이하인것을 알 수 있다.
2. A부터 DFS를 시작하는데 해당 숫자가 방문될 때마다 visited 배열의 해당 인덱스를 1 증가시킨다.
3. visited 배열의 해당 인덱스 값이 3이 된다면 반복 수열이 3번째 반복되고 있는 것이므로 DFS를 탈출한다.
* 반복되는 부분을 제외했을 때, 수열에 남게 되는 수들의 개수를 구하는 프로그램을 작성하시오.
즉, 1번만 나온 숫자들의 개수를 더하면 답이 된다.
 */
fun main() {
    val br = BufferedReader(InputStreamReader(System.`in`))
    val bw = BufferedWriter(OutputStreamWriter(System.out))

    val (origin, p) = br.readLine().split(" ").map { it.toInt() }

    val max = 300001
    val visited = IntArray(max)

    fun dfs(a:Int){
        visited[a] +=1
        if (visited[a] == 3) return

        var num = 0
        for (i in a.toString()){
            num += (i-'0').toDouble().pow(p).toInt()
        }

        return dfs(num)

    }

    dfs(origin)

    var answer = 0
    for (i in 0 until max){
        if (visited[i] == 1) answer+=1
    }

    bw.write("$answer")

    bw.flush()
    bw.close()
    br.close()
}
