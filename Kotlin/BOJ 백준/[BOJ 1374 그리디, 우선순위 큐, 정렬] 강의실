import java.io.BufferedReader
import java.io.BufferedWriter
import java.io.InputStreamReader
import java.io.OutputStreamWriter
import java.util.*
import kotlin.collections.ArrayDeque

/*
- 아이디어:
1. 우선순위 큐를 활용한다.
2. 큐에 Pair(시작시간, 종료시간)으로 넣는다.
3. 시작시간 기준 오름차순으로 정렬한다.
4. 우선순위큐에 큐 맨 앞에 있는 종료 시간을 넣는다.
5. 큐가 없어질 때까지 while문을 돌린다.
6. 우선순위 큐 맨 앞에 있는 수(종료시간)보다 큐에서 뺀 시작시간이 크거나 같으면 우선순위큐 맨 앞의 값을 뺀다.
7. 그리고 무조건 큐에서 뺀 값의 종료시간을 우선순위 큐에 넣는다.
8. 쉽게 말해, 끝난 수업이 있으면 강의실 하나가 비기 때문에 우선순위 큐에서 빼는 것이다. 
 */
fun main() {
    val br = BufferedReader(InputStreamReader(System.`in`))
    val bw = BufferedWriter(OutputStreamWriter(System.out))

    val numberOfClass = br.readLine().toInt()

    val q = ArrayDeque<Pair<Int,Int>>()

    repeat(numberOfClass){
        val (n, st, ed) = br.readLine().split(" ").map { it.toInt() }
        q.add(Pair(st, ed))
    }
    q.sortBy { it.first }

    val priorityQueue = PriorityQueue<Int>()
    priorityQueue.add(q.removeFirst().second)

    while (q.isNotEmpty()){
        val (st, ed) = q.removeFirst()
        if (priorityQueue.peek() <= st){
            priorityQueue.poll()
        }
        priorityQueue.add(ed)
    }

    bw.write("${priorityQueue.size}")

    bw.flush()
    bw.close()
    br.close()
}
