import java.io.BufferedReader
import java.io.BufferedWriter
import java.io.InputStreamReader
import java.io.OutputStreamWriter
/*
- 아이디어:
LIS 알고리즘을 이용하여 풀면 되는 문제이다.
LIS 알고리즘 (Longest Increasing Subsequence Algorithm)은
최장 증가 수열 알고리즘으로 증가하는 원소들의 가장 긴 부분집합을 찾는 알고리즘이다.

증가하는 원소들의 가장 긴 부분 집합을 빼고 나머지 수를 옮기면 된다.
만약 1 2 6 7 3 4 5 가 주어진다면,
최장 증가 수열은 {1,2,3,4,5}이다.
따라서, 총 개수 - 최장 증가 수열 개수을 해서 답은 2가 된다.
 */
fun main() {
    val br = BufferedReader(InputStreamReader(System.`in`))
    val bw = BufferedWriter(OutputStreamWriter(System.out))

    val n = br.readLine().toInt()
    val map = mutableListOf<Int>()
    for (i in 0 until n) {
        map.add(br.readLine().toInt())
    }

    var answer = 0
    val res = IntArray(n + 1) { 1 }
    for (i in 0 until n) {
        for (j in i+1 until n){
            if (map[i] < map[j])
                res[j] = kotlin.math.max(res[j], res[i]+1)
        }
        answer = kotlin.math.max(answer, res[i])
    }

    bw.write("${n-answer}")

    bw.flush()
    bw.close()
    br.close()
}
