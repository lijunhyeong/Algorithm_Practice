import java.io.BufferedReader
import java.io.BufferedWriter
import java.io.InputStreamReader
import java.io.OutputStreamWriter
/*
- 아이디어:
→, ↓, ↘의 세 방향의 도착 경우의 수를 구하는 문제다.
→ : answer[j][i-1]
↓ : answer[j-1][i]
↘ : answer[j-1][i-1]
세 방향의 경우의 수를 누적으로 구하면 된다. 
answer[j][i] = (answer[j-1][i] + answer[j][i-1] + answer[j-1][i-1]) % 1000000007
*/
fun main() {
    val br = BufferedReader(InputStreamReader(System.`in`))
    val bw = BufferedWriter(OutputStreamWriter(System.out))

    val (n, m) = br.readLine().split(" ").map { it.toInt() }
    val answer = Array(n + 1) { LongArray(m + 1) }
    answer[1][1] = 1

    for (j in 1..n){
        for (i in 1..m){
            if (i==1 && j == 1) continue
            answer[j][i] = (answer[j-1][i] + answer[j][i-1] + answer[j-1][i-1]) % 1000000007
        }
    }

    bw.write("${answer[n][m]}")

    bw.flush()
    bw.close()
    br.close()
}
