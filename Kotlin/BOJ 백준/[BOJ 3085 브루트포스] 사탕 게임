import java.io.BufferedReader
import java.io.BufferedWriter
import java.io.InputStreamReader
import java.io.OutputStreamWriter
import java.lang.Integer.max

fun main() {
    val br = BufferedReader(InputStreamReader(System.`in`))
    val bw = BufferedWriter(OutputStreamWriter(System.out))

    val n = br.readLine().toInt()
    val map = Array(n) { Array(n) { ' ' } }
    for (y in 0 until n) {
        val s = br.readLine()
        for (x in 0 until n) {
            map[y][x] = s[x]
        }
    }

    // 오른쪽 탐색
    fun leftRightSearch(y: Int, x: Int, s: Char): Int {
        var cnt = 0
        // 왼쪽
        for (nx in x + 1 until n) {
            if (nx in 0 until n) {
                if (map[y][nx] == s) cnt += 1
                else break
            } else {
                break
            }
        }
        // 오른쪽
        for (nx in x - 1 downTo 0) {
            if (nx in 0 until n) {
                if (map[y][nx] == s) cnt += 1
                else break
            } else {
                break
            }
        }
        return cnt
    }

    // 왼쪽 탐색
    fun topDownSearch(y: Int, x: Int, s: Char): Int {
        var cnt = 0
        // 위
        for (ny in y - 1 downTo 0) {
            if (ny in 0 until n) {
                if (map[ny][x] == s) cnt += 1
                else break
            } else {
                break
            }
        }
        // 아래
        for (ny in y + 1 until n) {
            if (ny in 0 until n) {
                if (map[ny][x] == s) cnt += 1
                else break
            } else {
                break
            }
        }
        return cnt
    }

    var answer = 0
    // 내자리, 오,왼,아,위
    val dx = arrayOf( 1, -1, 0, 0)
    val dy = arrayOf( 0, 0, 1, -1)
    for (y in 0 until n) {
        for (x in 0 until n) {
            // 상하좌우 바꿨을 때
            for (i in 0 until 4) {
                val ny = y + dy[i]
                val nx = x + dx[i]
                var leftRight = 1    // 자기자신
                var topDown = 1    // 자기자신
                if (ny in 0 until n && nx in 0 until n) {
                    // 바꿔주기
                    val origin = map[y][x]
                    val new = map[ny][nx]
                    map[y][x] = new

                    // x열탐색
                    leftRight += leftRightSearch(ny, nx, origin)
                    // y열탐색
                    topDown += topDownSearch(ny, nx, origin)
                    map[y][x] = origin
                    answer = max(answer, leftRight)
                    answer = max(answer, topDown)
                    /*println("leftRight --- $leftRight")
                    println("topDown ---- $topDown")
                    println("x $x y $y ,, nx $nx ny $ny")*/
                }
            }
        }
    }
    bw.write("$answer")

    bw.flush()
    bw.close()
}
