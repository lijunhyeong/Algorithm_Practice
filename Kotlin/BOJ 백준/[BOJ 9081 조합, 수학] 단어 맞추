import java.io.BufferedReader
import java.io.BufferedWriter
import java.io.InputStreamReader
import java.io.OutputStreamWriter
/*
- 아이디어:
1. 주어진 단어를 뒤에서 부터 탐색하여 제일 마지막 단어인지 확인한다.
2. 마지막 단어라면 그대로 출력한다.
3. 뒤에서부터 탐색했을 때 자신보다 컸던 인덱스(idx)를 기억한다.
4. idx 부터 주어진 단어 길이까지 탐색하면서 idx-1보다 큰 최소 문자를 찾는다.
5. 4에서 찾은 값과 idx자리 값을 스왑한다.
6. idx 부터 주어진 단어 길이의 값을 오름차순하여 앞단어와 붙인다.
 */

fun main() {
    val br = BufferedReader(InputStreamReader(System.`in`))
    val bw = BufferedWriter(OutputStreamWriter(System.out))

    val n = br.readLine().toInt()

    repeat(n){
        val s = br.readLine().toCharArray()
        val (isCheck, idx) = isCheckLastWord(s)
        if (isCheck) {
            bw.write("${s.joinToString("")}\n")
        }else{
            bw.write("${combinationWord(s, idx).joinToString("")}\n")
        }
    }


    bw.flush()
    bw.close()
    br.close()
}

private fun isCheckLastWord(word: CharArray): Pair<Boolean,Int> {
    for (i in word.size-1 downTo 1){
        if (word[i] > word[i-1]) {
            return Pair(false, i)
        }
    }
    return Pair(true,0)
}

private fun combinationWord(word:CharArray, idx:Int): CharArray{
    var minStr = idx
    // idx-1 보다 큰 최소 문자 찾기
    for (i in idx until word.size){
        if (word[minStr] > word[i] && word[idx-1] < word[i]) minStr = i
    }

    //  스왑
    val s = word[minStr]
    word[minStr] = word[idx-1]
    word[idx-1] = s

    val arr = ArrayDeque<Char>()
    for (i in idx until word.size){
        arr.add(word[i])
    }
    arr.sort()

    for (i in idx until word.size){
        word[i] = arr.removeFirst()
    }
    return word
}
