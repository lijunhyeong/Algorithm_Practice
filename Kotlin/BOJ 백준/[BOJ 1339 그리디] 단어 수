import java.io.BufferedReader
import java.io.BufferedWriter
import java.io.InputStreamReader
import java.io.OutputStreamWriter
import kotlin.math.pow
/*
- 아이디어:
* 처음에는 백트래킹 완전 탐색을 통해 문제를 풀었다.
1. 각 알파벳마다의 자리수(1,000, 100 등)를 배열에 넣는다. ex) A = [1,000,1] , B = [10,000, 100]
2. 나온 알파벳을 set에 넣는다.
3. 완전 탐색을 돌며 자리수가 있는 배열에 9부터 -1을 하며 더하고, depth이 알파벳 개수만큼 됐을 때 값이 더 크면 갱신하고 리턴한다.
4. 해당 depth의 탐색이 끝나면 더한 값을 다시 빼고 탐색한다.
시간 676ms

* 같은 문제를 푼 친구의 아이디어
1. 각 알파벳의 자리수를 더한다.
  1-1) 만약 A가 1의 자리에서도 있고 100의 자리에서도 있다면, A = 101
2. 내림차순을 하고 9부터 자리수를 누적으로 곱한다.

나는 hashmap에 알파벳마다 나온 자리수를 누적으로 더한 후,
내림차순으로 정렬하고 9부터 answer에 더했다.
밑에 있는 코드는 이 로직이다.

 */
fun main() {
    val br = BufferedReader(InputStreamReader(System.`in`))
    val bw = BufferedWriter(OutputStreamWriter(System.out))

    val n = br.readLine().toInt()
    val mapSet = mutableSetOf<Char>()
    val hashMap = HashMap<Char, Int>()

    repeat(n) {
        val s = br.readLine()
        for (i in s.indices) {
            mapSet.add(s[i])
            if (hashMap[s[i]] == null) hashMap[s[i]] = (10.0).pow(s.length-1-i).toInt()
            else hashMap[s[i]] = hashMap[s[i]]!! + (10.0).pow(s.length-1-i).toInt()
        }
    }

    var answer = 0L
    var score = 9
    for (i in hashMap.toList().sortedByDescending { it.second }){
        answer += i.second*score
        score-=1
    }

    bw.write("$answer")

    bw.flush()
    bw.close()
    br.close()
}
