import java.io.BufferedReader
import java.io.BufferedWriter
import java.io.InputStreamReader
import java.io.OutputStreamWriter
import java.util.PriorityQueue

/*
- 아이디어: 최소 강의실 개수를 구하는 법
1. data Class를 만들어서 강의 (시작, 끝)시간을 배열에 넣는다.
2. 강의 시작 순으로 오름차순 정렬하고, 시작시간이 같다면 끝나는 시간으로 오름차순 정렬한다.
3. 제일 먼저 시작하는 강의를 classRoom(우선순위큐)에 넣는다.
4. for(1 until n) 만큼 돌면서 강의시간을 비교한다.
5. classRoom 맨 위에 있는 시간(강의 종료시간)과 같거나 큰 시간이 나오면
맨 앞을 빼고 해당 강의 시간의 종료시간을 classRoom에 넣는다.
6. classRoom 맨 위에 있는 시간보다 해당 강의 시작 시간(classSchedule[i].start)가 작으면
(classSchedule[i].end) 강의가 끝나는 시간을 class room에 넣어서 새로운 강의실을 만들어준다.
5. classSchedule 을 탐색 후에 classRoom에 남아 있는 값들이 필요한 강의실 개수이다.
 */

data class Class(
    val start: Int,
    val end: Int
)

fun main() {
    val br = BufferedReader(InputStreamReader(System.`in`))
    val bw = BufferedWriter(OutputStreamWriter(System.out))

    val n = br.readLine().toInt()
    // 강의 시간표
    val classSchedule = mutableListOf<Class>()
    // 강의실
    val classRoom = PriorityQueue<Int>()

    repeat(n) {
        val (s, t) = br.readLine().split(" ").map { it.toInt() }
        classSchedule.add(Class(s, t))
    }

    // 강의 시작 순으로 오름차순 정렬하고, 시작시간이 같다면 끝나는 시간으로 오름차순 정렬한다.
    classSchedule.sortWith(compareBy<Class> { it.start }.thenBy { it.end })


    for (i in 0 until n){
        // 첫번째에는 끝나는 값을 만들어 PriorityQueue 넣는다.
        if (i == 0) classRoom.add(classSchedule[0].end)
        else{
            if (classRoom.peek() <= classSchedule[i].start){
                classRoom.poll()
                classRoom.add(classSchedule[i].end)
            }else{
                classRoom.add(classSchedule[i].end)
            }
        }
    }

    bw.write("${classRoom.size}")

    bw.flush()
    bw.close()
    br.close()
}
