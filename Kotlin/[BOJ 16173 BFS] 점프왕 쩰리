import java.io.BufferedReader
import java.io.BufferedWriter
import java.io.InputStreamReader
import java.io.OutputStreamWriter

fun main() {
    val br = BufferedReader(InputStreamReader(System.`in`))
    val bw = BufferedWriter(OutputStreamWriter(System.out))

    val n = br.readLine().toInt()
    val map = Array(n + 1) { IntArray(n + 1) }

    for (i in 0 until n) {
        val s = br.readLine().split(" ").map { it.toInt() }
        for (j in 0 until n) {
            map[i][j] = s[j]
        }
    }

    fun bfs(y: Int, x: Int) {
        val q = ArrayDeque<Int>()
        q.add(y)
        q.add(x)
        var check = true
        while (q.isNotEmpty()) {
            val yy = q.removeFirst()
            val xx = q.removeFirst()
            val value = map[yy][xx]
            var ch = false
            // 오른쪽, 아래
            for (i in arrayOf(arrayOf(value, 0), arrayOf(0, value))) {
                val ny = yy + i[0]
                val nx = xx + i[1]
                if (ny in 0 until n && nx in 0 until n) {
                    // -1일경우 최종 지점이기 때문에 모든 활동을 중단
                    if (map[ny][nx] == -1) {
                        check = false
                        ch = true
                        bw.write("HaruHaru")
                        break
                    }
                    // 0일 경우 제자리에서 계속 맴돌기 때문에 실패
                    if (map[ny][nx] == 0){
                        ch = true
                        break
                    }
                    q.add(ny)
                    q.add(nx)
                }
            }
            if (ch) {
                q.clear()
            }
        }

        if (check) {
            bw.write("Hing")
        }

    }

    bfs(0, 0)

    bw.flush()
    bw.close()
}
