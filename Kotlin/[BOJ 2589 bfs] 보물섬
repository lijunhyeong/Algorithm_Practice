import java.io.BufferedReader
import java.io.BufferedWriter
import java.io.InputStreamReader
import java.io.OutputStreamWriter

fun main() {
    val br = BufferedReader(InputStreamReader(System.`in`))
    val bw = BufferedWriter(OutputStreamWriter(System.out))


    val (n,m)= br.readLine().split(" ").map{it.toInt()}
    val map = Array(n){mutableListOf<Char>()}
    repeat(n){
        val s = br.readLine()
        for(i in s){
            map[it].add(i)
        }
    }

    var answer = 0
    val dy = arrayOf(0,0,-1,1)
    val dx = arrayOf(-1,1,0,0)
    fun bfs(y:Int, x:Int){
        val mapCount = Array(n){IntArray(m) }
        val visited = Array(n){BooleanArray(m)}
        visited[y][x] = true
        val q = ArrayDeque<Int>()
        q.add(y)
        q.add(x)

        while(q.isNotEmpty()){
            val yy = q.removeFirst()
            val xx = q.removeFirst()
            for(i in 0 until 4){
                val ny = yy+dy[i]
                val nx = xx+dx[i]
                if(ny in 0 until n && nx in 0 until m
                    && map[ny][nx] == 'L' && !visited[ny][nx]){
                    visited[ny][nx] = true
                    mapCount[ny][nx] = mapCount[yy][xx] + 1
                    q.add(ny)
                    q.add(nx)
                    if(answer < mapCount[ny][nx]){
                        answer = mapCount[ny][nx]
                    }
                }
            }
        }

        /*for (j in 0 until n){
            for (i in 0 until m){
                bw.write("${mapCount[j][i]} ")
            }
            bw.write("\n")
        }
        bw.write("\n")*/

    }

    for(j in 0 until n){
        for(i in 0 until m){
            if(map[j][i] == 'L'){
                bfs(j,i)
            }
        }
    }

    bw.write("$answer")
    
    bw.flush()
    bw.close()
}
