/*
12865 평범한 배낭
1. 아이디어:
전형적인 배낭문제, DP
2. 시간복잡도 O(N2)
3. 자료구조  Array
 */
import java.io.BufferedReader
import java.io.BufferedWriter
import java.io.InputStreamReader
import java.io.OutputStreamWriter
import kotlin.math.max
import kotlin.math.min

fun main() {
    val br = BufferedReader(InputStreamReader(System.`in`))
    val bw = BufferedWriter(OutputStreamWriter(System.out))

    val (n, k) = br.readLine().split(' ').map { it.toInt() }

    val dp = Array(n+1) { Array(k + 1) { 0 } }

    for (i in 1..n) {
        val (kg, v) = br.readLine().split(' ').map { it.toInt() }
        for (j in 1..k) {
            // j(현재 무게가) kg 보다 작을 경우 이전 값을 넣는다.
            if (j < kg) {
                dp[i][j] = dp[i - 1][j]
            } else {
                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - kg] + v)
            }
        }
    }

    bw.write("${dp[n][k]}")



    bw.flush()
    bw.close()

}
