import java.io.BufferedReader
import java.io.BufferedWriter
import java.io.InputStreamReader
import java.io.OutputStreamWriter
import java.util.*

fun main() {
    val br = BufferedReader(InputStreamReader(System.`in`))
    val bw = BufferedWriter(OutputStreamWriter(System.out))


    val (V,E) = br.readLine().split(" ").map { it.toInt() }
    val K = br.readLine().toInt()
    val edge = Array(V+1){ mutableListOf<List<Int>>()}
    
    val INF = Int.MAX_VALUE
    val dist = IntArray(V+1) { _ -> INF }

    for (i in 0 until E){
        val (u,v,w) = br.readLine().split(" ").map { it.toInt() }
        edge[u].add(listOf(w,v))
    }

    // 시작점 초기화
    dist[K] = 0
    val priorityQueue = PriorityQueue<Pair<Int,Int>>(V+1, Comparator {
            a, b -> a.first - b.first
    })
    priorityQueue.add(Pair(0,K))

    while (priorityQueue.isNotEmpty()){
        val (ew, ev) = priorityQueue.remove()
        if (dist[ev] != ew) continue
        for ( (nw, nv) in edge[ev]){
            if (dist[nv] > (ew+nw)){
                dist[nv] = ew+nw
                priorityQueue.add(Pair(dist[nv], nv))
            }
        }
    }

    for (i in 1..V){
        if (dist[i] == INF) bw.write("INF\n")
        else bw.write("${dist[i]}\n")
    }

    bw.flush()
    bw.close()
}
