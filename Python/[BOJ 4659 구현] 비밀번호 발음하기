'''
3가지 조건을 각각 케이스를 만든다.
조건에 부합하면 1을 리턴하고 부합하지 않으면 -1을 리턴한다.
최종적으로 각 케이스의 합이 3이 나오면 가능, 아니면 불가능이다.
'''
from collections import deque
import sys
input = sys.stdin.readline


# 모음 하나를 반드시 포함해야 함.
# 모음이 하나라도 포함하면 1 리턴
# 모음이 포함되지 않으면 -1리턴
def case1(s):
    for i in s:
        if i in ['a','e','i','o','u']:
            return 1
    return -1

# 모음이 3개 혹은 자음 3개 연속으로 오면 안됨
# graph 큐를 만들고 크기가 3이 됐을 때 모음과 자음 개수를 구한다.
# 모음 또는 자음이 3개면 3개가 연속되기 때문에 조건에 맞지 않으므로 -1 리턴으로 함수 종료.
def case2(s):
    graph = deque()

    for i in range(len(s)):
        graph.append(s[i])

        if len(graph) ==3:
            consonant = 0   # 자음
            vowel = 0   # 모음

            for j in graph:
                if j in ['a','e','i','o','u']:
                    vowel+=1
                else:
                    consonant +=1

            if vowel == 3 or consonant == 3:
                return -1
            else:
                graph.popleft()
    return 1

# 같은 글자가 연속적으로 두번 오면 안되나, ee와 oo는 허용
def case3(s):
    graph = []

    for i in range(len(s)):
        graph.append(s[i])
        if len(graph) >=2:
            if graph[i] == graph[i-1]:
                if graph[i] != 'e' and graph[i] != 'o':
                    return -1
    return 1

while True:
    s = ''.join(input().split()) 

    if s == "end":
        break

    check = 0
    check += case1(s)
    # print("1", check)
    check += case2(s)
    # print("2", check)
    check += case3(s)
    # print("3", check)

    if check == 3:
        print("<" + s + "> is acceptable.")
    else:
        print('<' + s + '>', 'is not acceptable.')


