# 아이디어
# 그래프 테두리를 만들고 bfs로 경로 탐색해서 최단 경로 찾기
# 동근이의 좌표와 가게의 좌표가 같을 때는 최종값에 더하지 않는다. 거리가 0이기 때문에
from collections import deque
import sys, copy
input = sys.stdin.readline

x, y = map(int, input().split())
graph = [[0]*(x+1) for _ in range(y+1)]
visited = [[False]*(x+1) for _ in range(y+1)]
for i in range(y+1):
    visited[i][0] = True
    visited[i][x] = True
    if i == 0 or i==y:
        for j in range(x+1):
            visited[i][j] = True
            
    
n = int(input())
store = []
# 가게 좌표
for i in range(n):
    a, b = map(int, input().split())
    if a == 1:
        store.append([0, b])
    if a == 2:
        store.append([y, b])
    if a == 3:
        store.append([b, 0])
    if a == 4:
        store.append([b, x])

# 동근이 좌표
pointY, pointX = map(int, input().split())
if pointY == 1:
    pointY = 0
if pointY == 2:
    pointY = y
if pointY == 3:
    pointY = pointX
    pointX = 0
if pointY == 4:
    pointY = pointX
    pointX = x

# for i in store:
#     print(i)
# print("pint", pointY, pointX)

dy = [1,-1,0,0]
dx = [0,0,1,-1]
answer = 0
for i in store:
    if pointY != i[0] or pointX != i[1]:
        graphCopy = copy.deepcopy(graph)
        visitedCopy = copy.deepcopy(visited)

        q = deque()
        q.append([pointY, pointX])
        dist = 99999
        while len(q) > 0:
            yy, xx = q.popleft()
            
            for j in range(4):
                ny = yy+dy[j]
                nx = xx+dx[j]
                
                if ny <= y and ny >= 0 and nx <= x and nx >=0:
                    if visitedCopy[ny][nx] == True:
                        graphCopy[ny][nx] = graphCopy[yy][xx] +1
                        if ny == i[0] and nx == i[1]:
                            dist = min(dist, graphCopy[i[0]][i[1]])
                            continue
                        else:
                            visitedCopy[ny][nx] = False
                            q.append([ny, nx])
        
        
        # for i in range(y+1):
        #     for j in range(x+1):
        #         print(graphCopy[i][j], end=" ")
        #     print()
        # print()
        # print(graphCopy[i[0]][i[1]])
        # print("??", dist)
        answer += dist
        
print(answer)
    
