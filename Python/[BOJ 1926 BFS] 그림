from collections import deque
import sys      # 빠른 입출력 sys.stdin.readline().rstrip()
input = sys.stdin.readline

# y=6 , x=5
n, m = map(int, input().split())

# 그림 받기
map = [list(map(int, input().split())) for _ in range(n)]
# 가로 m개, 세로 n개 2차원 배열
chk = [[False]*m for _ in range(n)]

# 오, 아래, 왼, 위
dy = [0,1,0,-1]
dx = [1,0,-1,0]
def bfs(y,x):
    rs = 1      # 그림의 크기 리턴
    q = deque()
    q.append((y,x))
    while q:
        ey, ex = q.pop()
        for k in range(4):
            ny = ey+dy[k]
            nx=ex+dx[k]
            # 그래프를 넘어가면 안됨
            if 0 <= ny <n and 0 <=nx<m:
                # 방문하지 않은 경우
                if map[ny][nx] == 1 and chk[ny][nx] == False:
                    rs+=1
                    chk[ny][nx] = True
                    q.append((ny,nx))

    return rs

cnt = 0     # 그림 개수
maxv = 0       # 그림의 최대 크기

# 보통 y를 먼저 돌고, x를 돈다
for j in range(n):
    for i in range(m):
        # 지도가 그림이고 방문하지 않았다면
        if map[j][i] == 1 and chk[j][i] == False:
            # 방문을 True
            chk[j][i] = True
            # 전체 그림 개수 +1
            cnt+=1
            # BFS > 그림 크기를 구하고
            # 최대값 갱신
            maxv = max(maxv, bfs(j,i))


print(cnt)      # 그림 개수
print(maxv)      # 그림 최대 크기
