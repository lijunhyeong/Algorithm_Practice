case = int(input())

for i in range(case):

    k = int(input())
    n = int(input())

    if n == 1:  # 1호이면 무조건 1명
        print(n)
    else:
        stay = [[i for i in range(1, n+1)] ]  # 0층 각 호의 거주민
        
        for j in range(k-1):    # 밑에 층까지 구하기
            sumN_list = []

            for kk in range(1,n+1): # 2호부터 각 호의 거주민 수 구하기
                sumN = 0
                for l in range(kk):
                    sumN += stay[-1][l]

                sumN_list.append(sumN)
            stay.append(sumN_list)
        
        print(sum(stay[-1]))


''' explanation
8 Line: 1호이면 층 상관없이 무조건 1이기 때문에 1을 출력한다.
11 Line: 0층의 각 호에 거주민 수를 넣어준다.
13 Line: k-1층까지의 거주민 수를 구하면 되기 때문에 k-1층까지 구한다.
16 Line: (1,n+1)인 이유는 18 Line에서 각 호의 거주민을 구하는데 1부터 시작해야지 배열의 0번째부터 더할 수 있기 때문이다.

stay에 이차원 배열을 만들어서 풀었다. 예를 들어 k=2, n=3이 주어진다면
stay=[[1,2,3],[1,3,6]] 이렇게 0번째 인덱스에 0층의 1호부터 3호까지의 거주민 수, 1번째 인덱스에는 1층의 1호부터 3호까지의 수를 구한다.
그 다음 k-1층까지의 거주민 수를 구하기 때문에 sum(stay[-1])을 통해 밑에 층의 거주민수를 더해준다.
'''
